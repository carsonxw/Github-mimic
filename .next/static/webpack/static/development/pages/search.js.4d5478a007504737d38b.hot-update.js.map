{"version":3,"file":"static/webpack/static/development/pages/search.js.4d5478a007504737d38b.hot-update.js","sources":["webpack:///./pages/search.js"],"sourcesContent":["import { withRouter } from 'next/router';\nimport { Row, Col, List } from 'antd';\nimport Router from 'next/router';\nimport Link from 'next/link';\n\nconst api = require('../lib/api');\n\nconst LANGUAGE = [\n    'JavaScript',\n    'HTML',\n    'CSS',\n    'TypeScript',\n    'Java',\n    'Rust',\n];\n\nconst SORT_TYPES = [\n    {\n        name: 'Best Match'\n    },\n    {\n        name: 'Most Stars',\n        value: 'starts',\n        order: 'desc'\n    },\n    {\n        name: 'Fewest Stars',\n        value: 'starts',\n        order: 'asc'\n    },\n    {\n        name: 'Most Forks',\n        value: 'forks',\n        order: 'desc'\n    },\n    {\n        name: 'Fewest Forks',\n        value: 'forks',\n        order: 'asc'\n    }\n];\n\n/**\n * sort: 排序方式\n * order: 排序顺序\n * lang: 仓库项目开发主语言\n * page: 分页页面\n */\n\n const selectedItemStyle = {\n     borderLeft: '2px solid #e36209',\n     fontWeight: 100, \n }\n\n const FilterLink = ({ name, query, lang, sort, order }) => {\n    // const doSearch = () => {\n    //     Router.push({\n    //         pathname: '/search',\n    //         query: {\n    //             query,\n    //             lang,\n    //             sort,\n    //             order\n    //         }\n    //     });\n    // };\n    let queryString = `?query=${query}`;\n    if (lang) queryString += `&lang=${lang}`;\n    if (sort) queryString += `&sort=${sort}&order=${order || 'desc' }`;\n    // if (page) queryString += `page=${page}`;\n\n    /**\n     * 1.SEO\n     * 2.while click on the 'Best Match', aviod sort and order are null\n     */\n    return <Link href={ `/search${queryString}` }><a>{ name }</a></Link>\n }\n\nfunction Search({ router, repos }) {\n    //get query\n    console.log(repos);\n    console.log(router);\n\n    const { ... querys } = router.query;\n    const { lang, sort, order } = router.query;\n    return (\n        <div className=\"root\">\n            <Row gutter={20}>\n                <Col span={6}>\n                    <List \n                        bordered\n                        header={<span className=\"list-header\">Language</span>}\n                        style={{ marginBottom: 20 }}\n                        dataSource={LANGUAGE}\n                        renderItem={item => {\n                            const selected = lang === item;\n                            return (\n                                <List.Item style={selected ? selectedItemStyle : null}>\n                                    { selected ? \n                                        <span>{ item }</span> : \n                                        (\n                                            <FilterLink\n                                                { ...querys }\n                                                lang={item}\n                                                name={item}\n                                            />  \n                                        ) \n                                    }\n                                   \n                                </List.Item>\n                            )\n                        }}\n                    />\n                    <List \n                        bordered\n                        header={<span className=\"list-header\">Sorted</span>}\n                        dataSource={SORT_TYPES}\n                        renderItem={item => {\n                            let selected = false;\n                            if (item.name === 'Best Match' && !sort) {\n                                selected = true;\n                            } else if (item.value === sort && item.order === order) {\n                                selected = true;\n                            } else {\n                                selected = false;\n                            }\n                            return (\n                                <List.Item style={selected ? selectedItemStyle : null}>\n                                    {\n                                        selected ? <span>{ item.name }</span>\n                                        : \n                                        (\n                                            <FilterLink\n                                                { ... querys }\n                                                sort={item.value}\n                                                order={item.order}\n                                                name={item.name}\n                                            />               \n                                        )\n                                    }\n                                    \n                                </List.Item>\n                            )\n                        }}\n                    />\n                </Col>\n            </Row>\n            <style jsx>{`\n                .root {\n                    padding: 20px 0; \n                }\n                .list-header {\n                    font-weight: 800;\n                    font-size: 16px;\n                }\n            `}</style>\n        </div>\n    )\n}\n\nSearch.getInitialProps = async ({ ctx }) => {\n    const { query, sort, lang, order, page } = ctx.query;\n    \n    if (!query) {\n        return {\n            repos: {\n                total_count: 0\n            }\n        }\n    }\n\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2;\n    let queryString = `?q=${query}`;\n    if (lang) queryString += `+language:${lang}`;\n    if (sort) queryString += `&sort=${sort}&order=${order || 'desc' }`;\n    if (page) queryString += `page=${page}`;\n\n    const result = await api.request({\n        url: `/search/repositories${queryString}`\n    }, ctx.req, ctx.res);\n\n    return {\n        repos: result.data\n    }\n}\n\nexport default withRouter(Search);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AADA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;;;;;;;AAOA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AAHA;AAUA;AAtBA;AAyBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AAJA;AAWA;AA9BA;AA3BA;AAAA;AAwEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AADA;AADA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAkBA;AADA;AACA;AAlBA;AAiBA;AAjBA;AAsBA;AADA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;;;;A","sourceRoot":""}